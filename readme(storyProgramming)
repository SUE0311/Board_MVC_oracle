모델2 기반의 MVC 패턴으로 제작한 웹 어플리케이션 [게시판]

[프로그래밍 시나리오]

User가 메인 페이지 게시판의 제목을 클릭해서 세부 내용을 보려는 상황을 바탕으로 설계를 해보자.

게시판은 데이터베이스와 연계해야 하는 프로그래밍이니 테이블을 만들어야겠다.
테이블을 만들 때 필요한 단계가 있는데 바로 시퀀스 만들기!
게시판의 경우 글을 등록할 때마다 자동으로 글의 번호가 늘어나잖아.
이 글 번호는 바로 기본키의 역할도 하는데 데이터를 입력하면 자동으로 다음 번호로 넘어가게 하는 시퀀스는 아주 유용하구나.

테이블을 다 만든 후에는 앞으로 열심히 일할 빈 객체를 만들 수 있는 자바빈 클래스를 만들어야지.
테이블의 컬럼명(속성)으로 멤버변수를 만들면 누구든지 한 눈에 앞 수 있지. 
아! setter/getter은 꼭 필요!!

테이블과 자바빈 클래스가 준비되었네.
그럼, 이제 User가 게시판을 누를 수 있는 메뉴가 있어야 하겠구나.. 
바로 메인 화면을 만들어야겠다.
서브 페이지마다 헤더와 푸터는 반복되니깐 템플릿으로 만들어서 include 시키는 게 편하겠다.

자.. 드디어 User가 메인 메뉴인 "게시판"을 클릭할 수 있는 메인 페이지는 준비되었구나.

두둥!! User가 메인 메뉴에 있는 게시판을 클릭했구나.
게시판에 링크되어 있는 board_list.jsp를 열어줘야겠구나.

여기서 목록보기를 위한 페이지 열기는 Model1 방식으로 해야지. Model2와 비교할 수 있는 기회가 되겠지?

View 역할을 하는 board_list.jsp 페이지에서는 먼저, 디비 연동을 위해 DAO클래스 객체를 생성해야겠군..

아.. DAO 클래스가 필요하겠구나.

BoardDAO라는 이름으로 DAO 클래스를 만들어야겠다.
이건 바로, 디비와 직접적으로 연동하는 클래스지.
디비 연동과 쿼리문 수행을 위한 클래스의 참조변수를 선언해야겠군.
Connection pool을 이용하면 편하지. 이건 이전에 정리해봤으니 쉽게 구현할 수 있겠다.

이제 DAO 클래스를 만들었으니 데이터들을 가져와야겠다.
디비 객체에 리스트를 불러오는 getBoardList()메소드를 붙여 호출해야지.
이런! getBoardList() 메소드가 DAO에 있어야겠구나.

getBoardList() 메소드는 List 컬렉션과 제너릭 타입으로 자바빈 클래스를 지정해서 만드는 게 편하겠다.
그리고 메소드 안에 select 쿼리문을 만들고, 자바빈 객체를 만들어야겠다.
당연히, setter() 메소드로 동적 sql에 필요한 변수 값을 넣어주고!
마지막으로 값를 담은 빈 객체를 List에 add() 메소드를 이용해서 추가시켜야겠다.

이제 board_list.jsp에서 테이블 td에 표현식으로 디비에 있는 자료들을 뿌려야지.
흐흐.. 드디어 User가 게시판의 목록들을 열람할 수 있게 되었네.

또 한번 두둥.. User가 게시판의 보고 싶은 글의 제목을 클릭하는 상황이닷!!!

이제 드디어 MVC model2 방식의 진가를 발휘할 타이밍이 왔네!

User가 내용 보기를 요청하는 순간!!! 무조건 이동해야 하는 frontController 클래스를 만들어야지!!

frontController 클래스는 어떤 페이지로 이동하더라도 반드시 거치는 서블릿이라고도 하지!
이 클래스는 User의 요청에 따른 페이지 또는 Action 클래스로 호출하는 포워딩을 하는 중요한 역할을 하지.

참고로 frontController 클래스는 HTTP 서블릿을 작성하기 위해서 HttpServlet 클래스를 상속받았어.
이 클래스 안에 구현되어 있는 메소드는 service() 인데 HTTP Request를 받아들여, doXXX(get 또는 post) 메소드에 배분하는 역할을 한데.

아, 그런데 User가 링크한 url(jsp의 파일명이라고 보면 되겠지)이 다 다를 텐데..
어떻게 User의 모든 요청을 frontController 클래스로 바도 전달하게 하지?

음.. 그건 web.xml을 이용하면 되겠군. 모든 페이지의 url-pattern을 "*.do"로 설정해서 어떤 주소든 ".do"로 끝나면 frontController 클래스가 있는 곳으로 갈 수 있도록 해야겠다.
web.xml에서 url-pattern과 짝을 지은 servlet-class의 이름을 com.mtory.action.MtoryFrontController으로 하면 되겠구나.

자, 그럼 앞으로 User가 어떤 곳을 클릭하던 .do로 호출한 url은 무조건 FrontController 클래스로 가겠네.

그런데, 또 하나 해결할 문제!

frontController은 User가 요청한 페이지로 어떻게 action class의 이름을 알 수 있을까?
이름을 알아야 User가 요청한 내용을 응답할 수 있는 action 클래스로 포워딩을 할 수 있을 텐데 말이지..

그렇지. ".do"로 끝나는 url와 action class의 이름을 매핑해줄 수 있는 properties 파일이 있으면 좋겠다.
앞으로 이 매핑 프로퍼티를 이용해서 User가 요청한 url(.do로 끝나는)에 짝꿍인 action class를 연결시켜줘야지.

그리고 나서 frontController 클래스 안에 자바 유틸 패키지에 있는 Properties 클래스를 이용해서 객체를 만들고 properties 파일을 이 프로퍼티 객체 안에 로드해야지.

이제. 프로퍼티 객체를 가지고 해당하는 action class의 이름을 알 수 있게 되었구나.
“StringTokenizer" 이용하여 구분자로 포워딩 할 정확한 action class의 url를 뽑아내기만 하면 되겠군.

그리고 ActionForward 클래스로 만든 forward를 객체를 이용해서 setPath()에 액션 주소를 넣어 포워딩해야지.

이제 드디어 중요한 “내용보기” 액션 클래스들을 만들어야겠다.
근데.. User의 요청이 있을 때마다 필요한 액션 클래스들의 통일성이 있지 않을까?

FrontController 클래스에서 redirect 여부와 포워딩할 액션 페이지의 위치를 찾는 것처럼 
액션 클래스들도 User가요청한 일들을 모두 수행한 후에 모두 이 방식으로 view 페이지로 
돌아가야 할 텐데...
즉, 액션을 수행하고 이 후 User 한테 보여 줄 jsp파일(view페이지 라고 하는)로 포워딩하는 거 말이야.

아! Action 인터페이스를 만들어야겠다.
그리고 그 안에 명령을 수행하고 결과값을 가지고 페이지를 포워딩할 때 호출되는 ActionForward 클래스를 만들어야지.

앞으로 이 ActionForward 클래스의 객체는 액션 클래스에서 setPath() 메소드로 포워딩 해야 할 jsp(대부분 .do로 url을 바꿔준 페이지)의 주소를 지정해줘야지.
가장 중요한 역할을 하는 객체의 이름은 forward가 좋겠다.

이렇게 Action 인터페이스(ActionForward 클래스 타입으로 execute() 메소드가 있다는 거 잊지 말고!)를 만들고 나서 이 인터페이스를 요청에 필요한 액션들이 상속받으면 통일성이 이쁘게 맞춰지겠구나.

인터페이스를 상속한 클래스들은 꼭 메서드를 오버라이드 해야 하니.. 상속을 이용한 좋은 예라고 보면 좋겠군.

Action class의 이름은 뭐가 좋을까?
User가 게시판에 글을 열람하고 싶은 거니깐.. BoardContAction.java가 좋겠다.

그럼 이 클래스 안에 중요한 역할들을 한번 적어볼까~
클라이언트가 보낸 데이터가 한글이 포함될 수 있으니 인코딩을 하고!
클라이언트가 보낸 데이터를 파라미터에 담고!
글 번호 같이 정수형 타입일 경우 형변환도 해야지.
그리고 디비 접근을 위해 DAO 객체를 만들고!
자바 빈 객체인 board를 디비 객체와 연결하고!
파라미터로 받은 번호 값을 기준으로 내용을 가져오는 메소드와 연결시켜야지!

getCont() 메소드가 그 역할을 해야 할 텐데..
아! DAO에 이 메소드를 만들어야겠군.

DAO 클래스에 getCont() 메소드를 만들자.
먼저, select 쿼리가 필요할 테고, 동적 쿼리문이어야겠구나.
그래야 클라이언트가 입력한 제목의 번호(프라이머리키)를 배정할 수 있잖아.

그리고 검색한 레코드가 존재하는지 조건문 좀 만들자.
테이블에서 제목의 번호의 레코드가 있는지 확인했으면 빈 객체를 생성해서 객체에 해당 데이터를 set해야지.

자바빈 타입으로 모든 데이터를 받으니깐 정말 편하다.
게시판 프로그래밍에서 가장 열심히 일하는 자바빈 객체를 반환해야겠다.
즉, 호출한 곳으로 리턴하는 거지.

아, 내용을 본 글의 조회수를 증가시키는 것도 필요할 텐데..
이것도 DAO 만들어야겠군. 카운트를 증가시키는 메소드를 만들고!
BoardContAction.java 액션에서 메소드를 호출하면 클라이언트가 요청할 때마다 카운트가 증가하겠네.

자. BoardContAction.java에서 카운트도 증가시키고, 내용도 볼 수 있도록 메소드들을 호출한 뒤에는?
액션 페이지에서 forward 객체를 이용해서 view 페이지로 포워딩하는 게 마지막 일이겠구나.

ActionForward 클래스로 객체를 만들고.. 아, 그런데 forward해야 할까, redirect해야 할까?
게시물 보기의 경우 파라미터가 모두 넘어가야 하니깐, forward가 맞겠지.

ActionForward 클래스 안에 setPath() 메소드를 이용해서 view에 해당하는 board_cont.jsp을 지정해줘야지.
이제! 드디어 메소드를 달고 있는 forward 객체를 반환하면 끝나는구나.

아차차. 최종적인 view에 해당하는 board_cont.jsp 페이지가 아직 없는 상태구나.
이 페이지에서는 자바빈 객체에 getAttribute() 메소드를 이용해서 데이터의 값을 객체에 담고 있게 해줘야지.
그 후 테이블의 각 td에 해당하는 빈의 값을 하나씩 표현식으로 넣어주면 끝!

이제, Controller 역할을 하는 액션에 대한 개념은 어느 정도 이해가 되는 거 같은데..

Model1 방식으로 보여줬던 목록보기 페이지로 action class를 이용해서 확실하게 MVC로 만들어주고!

수정 액션, 삭제 액션도 글 내용 보기 시나리오를 다시 한번 훑어보며 하나씩 순서대로 만들어봐야겠다!!